name: Lint, test, and scan Helm charts

on:
  workflow_call:
    inputs:
      runs-on:
        description: The type of machine to run the job on.
        type: string
        required: false
        default: ubuntu-latest
      charts-base:
        description: Base directory containing the the chart version directories.
        type: string
        required: false
        default: charts
      lint-charts:
        description: Lint and test Helm charts
        type: boolean
        required: false
        default: true
      test-charts:
        description: Lint and test Helm charts
        type: boolean
        required: false
        default: false
      ct-config:
        description: Chart testing configuration
        type: string
        required: false
      ct-yaml:
        description: Chart testing configuration file
        type: string
        required: false
        default: ct.yaml
      ct-yaml-post-script:
        description: Bash script that runs after the Chart testing configuration file is configured.
        type: string
        required: false
      lint-pre-script:
        description: Bash script that runs before `ct lint`
        type: string
        required: false
      lint-post-script:
        description: Bash script that runs after `ct lint`
        type: string
        required: false
      test-pre-script:
        description: Bash script that runs before `ct install`
        type: string
        required: false
      test-post-script:
        description: Bash script that runs after `ct install`
        type: string
        required: false
      scan-charts:
        description: Template charts and scan Kubernetes resources with Snyk
        type: boolean
        required: false
        default: true
      scan-chart-snyk-args:
        description: Additional Snyk args when scanning images (e.g., `--severity-threshold=high`)
        type: string
        required: false
      scan-images:
        description: Scan container images with Snyk
        type: boolean
        required: false
        default: true
      scan-images-ignore-prefix-list:
        description: List of image prefixes to ignore when scanning images with Snyk. This field is a JSON array of strings.
        type: string
        required: false
        default: '["dtr.dev.cray.com"]'
      scan-image-snyk-args:
        description: Additional Snyk args when scanning images (e.g., `--severity-threshold=high`)
        type: string
        required: false
      helm-version:
        description: Helm version to install.
        type: string
        required: false
        default: v3.10.2
    secrets:
      SNYK_TOKEN:
        description: Snyk authorization token
        required: true

      ARTIFACTORY_ALGOL60_READONLY_USERNAME:
        description: Artifactory readonly username used to download helm charts. Note these credentials are not used to upload artifacts to artifactory.
        required: true
      ARTIFACTORY_ALGOL60_READONLY_TOKEN:
        description: Artifactory readonly token for the given user to download helm charts. Note these credentials are not used to upload artifacts to artifactory.
        required: true

jobs:
  lint-and-test:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      charts: ${{ steps.list-changed.outcome == 'skipped' && steps.list-charts.outputs.charts || steps.list-changed.outputs.charts }}
      images: ${{ steps.extract-images.outputs.images }}
    env:
      CT_CONFIG: ${{ inputs.ct-yaml }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ inputs.helm-version }}

      - name: Login to Artifactory helm chart repo
        shell: bash
        env:
          ARTIFACTORY_ALGOL60_READONLY_USERNAME: ${{ secrets.ARTIFACTORY_ALGOL60_READONLY_USERNAME }}
          ARTIFACTORY_ALGOL60_READONLY_TOKEN: ${{ secrets.ARTIFACTORY_ALGOL60_READONLY_TOKEN }}
        run: |
          printenv ARTIFACTORY_ALGOL60_READONLY_TOKEN | helm repo add cray-algol60 "https://artifactory.algol60.net/artifactory/csm-helm-charts" --username "$ARTIFACTORY_ALGOL60_READONLY_USERNAME" --password-stdin

      # Python is required because `ct lint` runs Yamale (https://github.com/23andMe/Yamale) and
      # yamllint (https://github.com/adrienverge/yamllint) which require Python
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
        if: inputs.lint-charts || inputs.test-charts

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.1.0
        if: inputs.lint-charts || inputs.test-charts

      - name: Configure chart-testing
        env:
          INPUTS_CT_CONFIG: ${{ inputs.ct-config }}
          CHARTS_BASE: ${{ inputs.charts-base }}
        shell: bash
        run: |
          if [[ ! -f "$CT_CONFIG" ]]; then
            mkdir -p "$(dirname "$CT_CONFIG")"
            touch "$CT_CONFIG"
          fi
          
          echo "Original chart testing configuration"
          cat $CT_CONFIG

          for CHART_VERSION_PATH in $CHARTS_BASE/v*; do
              echo "Adding chart version directory: ${CHART_VERSION_PATH}"
              export CHART_VERSION_PATH="$CHART_VERSION_PATH"
              yq eval --inplace -P '.chart-dirs |= . + [env(CHART_VERSION_PATH)]' "$CT_CONFIG"
          done

          yq eval-all --inplace -P '. as $item ireduce ({}; . * $item )' "$CT_CONFIG" <(echo "target-branch: $GITHUB_BASE_REF") <(echo "$INPUTS_CT_CONFIG")

          echo "Customized chart testing configuration"
          cat "$CT_CONFIG"
        if: inputs.lint-charts || inputs.test-charts

      - name: Run post configure chart-testing script
        shell: bash
        run: ${{ inputs.ct-yaml-post-script }}
        if: (inputs.lint-charts || inputs.lint-pre-script) && inputs.ct-yaml-post-script

      - name: List changed charts
        id: list-changed
        shell: bash
        run: echo "charts=$(ct list-changed --config "$CT_CONFIG" | jq -R | jq -sc)" >> $GITHUB_OUTPUT
        if: inputs.lint-charts || inputs.test-charts

      - name: Run pre-lint script
        shell: bash
        run: ${{ inputs.lint-pre-script }}
        if: inputs.lint-charts && inputs.lint-pre-script

      - name: Lint charts
        run: ct lint --config "$CT_CONFIG"
        if: inputs.lint-charts

      - name: Verify applications versions between Chart.yaml and values.yaml match
        shell: bash
        env:
          CHARTS_BASE: ${{ inputs.charts-base }}
        run: |
          for CHART_PATH in $CHARTS_BASE/v*/*; do
            echo
            echo "----------------------------------------"
            echo "Verifying $CHART_PATH"
            echo "----------------------------------------"
            echo

            CHART_YAML_PATH="$CHART_PATH/Chart.yaml"
            if [[ ! -f "$CHART_YAML_PATH" ]]; then
                echo "Error: Chart.yaml does not exist - $CHART_YAML_PATH"
                exit 1
            fi

            CHART_VALUES_PATH="$CHART_PATH/values.yaml"
            if [[ ! -f "$CHART_VALUES_PATH" ]]; then
                echo "Error: values.yaml does not exist - $CHART_VALUES_PATH"
                exit 1
            fi

            CHART_APP_VERSION=$(yq e .appVersion "$CHART_YAML_PATH")
            VALUES_APP_VERSION=$(yq e .global.appVersion "$CHART_VALUES_PATH")
            echo "Chart Application Version:  $CHART_APP_VERSION"
            echo "Values Application Version: $VALUES_APP_VERSION"

            if [[ "$CHART_APP_VERSION" == "$VALUES_APP_VERSION" ]]; then
                echo "PASS: Application versions in Chart.yaml and values.yaml agree!"
            else
                echo "FAIL: Application versions in Chart.yaml and values.yaml do NOT agree!"
                exit 1
            fi
          done
        if: inputs.lint-charts


      - name: Run post-lint script
        shell: bash
        run: ${{ inputs.lint-post-script }}
        if: inputs.lint-charts && inputs.lint-post-script

      - name: Create test Kubernetes cluster
        uses: helm/kind-action@v1.2.0
        if: inputs.test-charts && fromJSON(steps.list-changed.outputs.charts)[0] != null

      - name: Run pre-test script
        shell: bash
        run: ${{ inputs.test-pre-script }}
        if: inputs.test-charts && inputs.test-pre-script

      - name: Deploy charts to test Kubernetes cluster
        run: ct install --config "$CT_CONFIG"
        if: inputs.test-charts

      - name: Run post-test script
        shell: bash
        run: ${{ inputs.test-post-script }}
        if: inputs.test-charts && inputs.test-post-script

      - name: Find all charts (unless linting or testing)
        id: list-charts
        shell: bash
        run: echo "charts=$(yq e '.chart-dirs // ["charts"] | .[]' "$CT_CONFIG" | while read chartdir; do test -d $chartdir || continue; find $chartdir -name Chart.yaml -type f -maxdepth 2 -mindepth 2 -printf '%h\n'; done | jq -R | jq -sc)" >> $GITHUB_OUTPUT
        if: steps.list-changed.outcome == 'skipped'

      - name: Discover images required by charts
        id: extract-images
        env:
          CHARTS: ${{ steps.list-changed.outcome == 'skipped' && steps.list-charts.outputs.charts || steps.list-changed.outputs.charts }}
          IMAGES: ${{ runner.temp }}/images.txt
        shell: bash
        run: |
          jq -r '.[]' <<< "$CHARTS" | while read chart; do
            helm template release "$chart" --dry-run --replace --dependency-update | yq e -N '.. | .image? | select(.)' -
            helm show chart "$chart" | yq e '.annotations."artifacthub.io/images"' - | yq e -N '.[] | .image' -
          done | sort -u > $IMAGES
          echo "images=$(jq -R < $IMAGES | jq -sc)" >> $GITHUB_OUTPUT

  scan-charts:
    needs: lint-and-test
    if: inputs.scan-charts && fromJSON(needs.lint-and-test.outputs.charts)[0] != null
    strategy:
      matrix:
        chart: ${{ fromJSON(needs.lint-and-test.outputs.charts) }}
      fail-fast: false
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ inputs.helm-version }}

      - name: Template chart (${{ matrix.chart }})
        run: helm template release ${{ matrix.chart }} --dry-run --replace --dependency-update > ${{ matrix.chart }}/k8s-manifest.yaml

      - name: Run Snyk to check Kubernetes resources (${{ matrix.chart }})
        uses: snyk/actions/iac@master
        #continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          file: ${{ matrix.chart }}/k8s-manifest.yaml
          args: ${{ inputs.scan-chart-snyk-args }}

      #- name: Upload result to GitHub Code Scanning
      #  uses: github/codeql-action/upload-sarif@v1
      #  with:
      #    sarif_file: snyk.sarif

  scan-images: # to ensure dependent images are still free of CVEs
    needs: lint-and-test
    if: inputs.scan-images && fromJSON(needs.lint-and-test.outputs.images)[0] != null
    strategy:
      matrix:
        image: ${{ fromJSON(needs.lint-and-test.outputs.images) }}
      fail-fast: false
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Check image name against scan-images-ignore-prefix-list
        id: check-image-prefix
        env:
          IMAGE_PREFIXES_TO_IGNORE: ${{ inputs.scan-images-ignore-prefix-list }}
          IMAGE_NAME: ${{ matrix.image }}
        shell: python
        run: |
          import os
          import json

          def writeOutput(key, value):
            githubOutputFile = os.environ["GITHUB_OUTPUT"]

            with open(githubOutputFile, "a") as f:
              f.write(f'{key}={value}\n')

          imagesPrefixesToIgnore = json.loads(os.environ["IMAGE_PREFIXES_TO_IGNORE"])
          imageName = os.environ["IMAGE_NAME"]

          for prefix in imagesPrefixesToIgnore:
              if imageName.startswith(prefix):
                  print("Ignoring, found matching prefix", prefix)
                  writeOutput("scan-image", "false")
                  exit(0)

          writeOutput("scan-image", "true")

      - name: Login to algol60 Container Registry
        uses: docker/login-action@v2
        with:
          registry: artifactory.algol60.net
          username: ${{ secrets.ARTIFACTORY_ALGOL60_READONLY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_ALGOL60_READONLY_TOKEN }}

      - name: Run Snyk to check Docker image for vulnerabilities (${{ matrix.image }})
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ matrix.image }}
          args: ${{ inputs.scan-image-snyk-args }}
        if: steps.check-image-prefix.outputs.scan-image == 'true'
