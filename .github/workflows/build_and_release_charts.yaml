name: Build and Publish Helm charts
on:
  workflow_call:
    inputs:
      runs-on:
        description: The type of machine to run the job on.
        type: string
        required: false
        default: ubuntu-latest
      target-branch:
        description: Git repository branch to check against when determining charts that have changed.
        type: string
        required: false
        default: "master"
      artifactory-repo:
        description: Repository in Artifactory to publish Helm charts to.
        type: string
        required: false
        default: csm-helm-charts
      artifactory-component:
        description: The component is used to sort helm charts from the same repo internally in Artifactory. 
        type: string
        required: true
      enable-publish:
        description: Control the ability for this workflow to publish artifacts to Artifactory and create Git tags.
        type: boolean
        required: false
        default: true
      enable-pr-comment:
        description: Control whether the update-pr-with-artifacts job runs on PR builds. Choose from true or false
        type: string
        required: false
        default: |
          ðŸ‘‹  Hey! Here are the chart(s) we built for you:
          
          {{ if .isPRComment }}
          *Note*: this SHA is the merge of {{ .PRHeadSha }} and the PR base branch. Good luck and make rocket go now! ðŸŒ® ðŸš€
          {{ end }}
      pr-comment-search:
        description: Text to find the comment created by the update-pr-with-artifacts job on PR builds.
        type: string
        required: false
        default: Here are the chart(s) we built for you

      job-summary-template:
        description: Job summary template
        type: string

    secrets:
      ARTIFACTORY_ALGOL60_JFROG_CLI_CONFIGURATION:
        description: JFrog CLI configuration with permissions to upload artifacts to Artifactory
        required: true

      ARTIFACTORY_ALGOL60_READONLY_USERNAME:
        description: Artifactory readonly username used to download helm charts. Note these credentials are not used to upload artifacts to artifactory.
        required: true
      ARTIFACTORY_ALGOL60_READONLY_TOKEN:
        description: Artifactory readonly token for the given user to download helm charts. Note these credentials are not used to upload artifacts to artifactory.
        required: true
jobs:
  build_and_release:
    name: Build and Publish Helm charts
    runs-on: ${{ inputs.runs-on }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Generate build metadata
      uses: Cray-HPE/hms-build-metadata-action/generate-build-metadata@CASMHMS-5597
      id: build-meta
      with:
        stable-strategy: branch
        stable-branches-regex: ${{ inputs.target-branch }}  # Hack, for right now we will assume that we have 1 branch that is considered stable, as the build-changed-charts-action doesn't support
      
    - name: Build changed charts
      uses: Cray-HPE/hms-build-changed-charts-action@CASMHMS-5597
      with:
        target-branch: ${{ inputs.target-branch }}
        unstable-build-suffix: ${{ steps.build-meta.outputs.helm }}

    - name: Check for packaged charts
      id: packaged-charts
      shell: bash
      env:
        CHARTS_PATH: ./.packaged
      run: |
        if [[ -d "$CHARTS_PATH" ]]; then
          echo "Found packaged charts!"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "No packaged charts found!"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
 
    - name: Create Git tags for changed charts
      shell: bash
      run: | 
        for packaged_chart in $(find .packaged -mindepth 1 -maxdepth 1); do
          chart_tag=$(basename "$packaged_chart" .tgz)
          echo "Chart tag: $chart_tag"
          git tag $chart_tag
        done

        git push origin --tags
      if: inputs.enable-publish && steps.packaged-charts.outputs.exists == 'true' && fromJSON(steps.build-meta.outputs.is-stable)
    
    - uses: jfrog/setup-jfrog-cli@v3
      env:
        JF_ENV_1: ${{ secrets.ARTIFACTORY_ALGOL60_JFROG_CLI_CONFIGURATION }}
      if: inputs.enable-publish && steps.packaged-charts.outputs.exists == 'true'

    - name: Verify connectivity to Artifactory
      run: jfrog rt ping
      if: inputs.enable-publish && steps.packaged-charts.outputs.exists == 'true'

    - name: Publish Helm charts
      id: publish
      shell: bash
      env:
        ARTIFACTORY_REPO: csm-helm-charts
        STABLE_BUILD: ${{ fromJSON(steps.build-meta.outputs.is-stable) }}
        COMPONENT: ${{ inputs.artifactory-component }}
        CHARTS_PATH: ./.packaged
        CHARTS_PATTERN: "*.tgz"
        JFROG_RT_UPLOAD_OPTS: "--detailed-summary"
      run: |
        # Change current directory to $CHARTS_PATH, other wise v2 of the jfrog CLI will add $CHARTS_PATH as a prefix.
        cd $CHARTS_PATH
        
        echo "Stable build: $STABLE_BUILD"

        SOURCE_PATTERN="$CHARTS_PATTERN";
        echo "Source pattern: $SOURCE_PATTERN";

        STABLE_PATH="unstable";
        if [[ "$STABLE_BUILD" == "true" ]]; then
          STABLE_PATH="stable"
        fi;
        TARGET_PATTERN="$ARTIFACTORY_REPO/$STABLE_PATH/$COMPONENT/";
        echo "Target pattern: $TARGET_PATTERN";

        # Upload to Artifactory
        jfrog rt upload $JFROG_RT_UPLOAD_OPTS "$SOURCE_PATTERN" "$TARGET_PATTERN" | tee "${{ runner.temp }}/jfrog_publish_output.json"

        # Provide links for downloading
        for packaged_chart in $(find . -mindepth 1 -maxdepth 1); do
          CHART_FILE_NAME=$(basename "$packaged_chart")
          echo "Download link: https://artifactory.algol60.net/artifactory/$TARGET_PATTERN$CHART_FILE_NAME"
        done
      if: inputs.enable-publish && steps.packaged-charts.outputs.exists == 'true'

    - name: Job summary prep
      shell: bash
      env:
        JOB_SUMMARY_TEMPLATE: ${{ inputs.job-summary-template }}
      run: |
        # Write out the job summary template to a file
        printenv JOB_SUMMARY_TEMPLATE > "${{ runner.temp }}/job_summary_template.md"

        # Convert the output of the jfrog CLI to yaml to make it work easier with the render-template action.
        yq '{"wrap": .}' "${{ runner.temp }}/jfrog_publish_output.json" -P > "${{ runner.temp }}/job_summary_vars.yaml"

    - name: Render Job summary
      id: template
      uses: chuhlomin/render-template@v1.6
      with:
        template: "${{ runner.temp }}/job_summary_template.md"
        vars: |
          stableBuild: ${{ fromJSON(steps.build-meta.outputs.is-stable) }}
          component: ${{ inputs.artifactory-component }}
          unableBuildSuffix: ${{ steps.build-meta.outputs.helm }}
        vars_path: "${{ runner.temp }}/job_summary_vars.yaml"
        result_path: "${{ runner.temp }}/job_summary.md"

    - name: Set job summary
      run: |
        cat "${{ runner.temp }}/job_summary.md" >> $GITHUB_STEP_SUMMARY

  update-pr-with-artifacts:
    name: Update PR comment with artifacts
    runs-on: ${{ inputs.runs-on }}
    if: ${{ fromJSON(inputs.enable-pr-comment) && github.event_name == 'pull_request' }}
    needs:
      - build_and_release
    steps:
    - name: Find Comment
      uses: peter-evans/find-comment@v2
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: "${{ inputs.pr-comment-search }}"
     
    - name: Create comment
      if: steps.fc.outputs.comment-id == ''
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.pull_request.number }}
        body: ${{ steps.template.outputs.result }}
        reactions: rocket

    - name: Update comment
      if: steps.fc.outputs.comment-id != ''
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        body: ${{ steps.template.outputs.result }}
        edit-mode: replace